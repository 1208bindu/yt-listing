{"version":3,"sources":["components/Checkbox.js","components/DisplayVideoList.js","App.js","reportWebVitals.js","index.js"],"names":["CheckBox","props","onChange","e","changeChannelList","channelList","channelId","type","checked","isChecked","channelName","DisplayVideoList","className","displayList","map","displayListDetails","index","onClick","displayVideo","videoId","title","description","publishedAt","substring","onMouseOver","target","style","cursor","hideVideo","url","src","frameBorder","allow","allowFullScreen","App","useState","maxResult","favouriteChannel","setFavouriteChannel","videoList","setVideoList","setDisplayList","hiddenList","setHiddenList","setUrl","resetVideoList","useEffect","listToBeDisplayed","filter","hidden","find","id","definedVideoId","undefined","sort","a","b","Date","slice","newListToBeDisplayed","videos","hiddenVideos","detailsHiddenVideos","prevList","channelData","event","searchVideos","channels","responses","channel","fetch","then","res","json","catch","document","getElementById","display","innerHTML","Promise","all","forEach","responseListItem","items","videoDetails","snippet","value","selectedChannels","shows","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.68fa768e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CheckBox = (props) => {\r\n  return (\r\n    <li key={props.channelList.channelId}>\r\n      <input\r\n        onChange={(e) =>\r\n          props.changeChannelList(e, props.channelList.channelId)\r\n        }\r\n        type=\"checkbox\"\r\n        checked={props.channelList.isChecked}\r\n      />{\" \"}\r\n      {props.channelList.channelName}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n","import React from \"react\";\r\n\r\nconst DisplayVideoList = (props) => {\r\n  return (\r\n    <div className=\"row-videos\">\r\n      <div className=\"video-list\">\r\n        {props.displayList.map((displayListDetails, index) => (\r\n          <div key={index}>\r\n            <div className=\"video-list-item\" key={displayListDetails.videoId}>\r\n              <p>\r\n                <span\r\n                  onClick={() =>\r\n                    props.displayVideo(\r\n                      displayListDetails.videoId,\r\n                      displayListDetails.channelId\r\n                    )\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  <b>{displayListDetails.title}</b>\r\n                  <br />\r\n                  {displayListDetails.description}\r\n                  <br />\r\n                  <br />\r\n                  {displayListDetails.publishedAt.substring(0, 10)}\r\n                </span>\r\n                <span\r\n                  className=\"hide-list\"\r\n                  onMouseOver={(e) => {\r\n                    e.target.style.cursor = \"pointer\";\r\n                  }}\r\n                  onClick={() => {\r\n                    props.hideVideo(\r\n                      displayListDetails.videoId,\r\n                      displayListDetails.channelId\r\n                    );\r\n                  }}\r\n                >\r\n                  Hide\r\n                </span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {props.url ? (\r\n        <div className=\"video-frame \">\r\n          <iframe\r\n            className=\"responsive-iframe\"\r\n            src={props.url}\r\n            frameBorder=\"0\"\r\n            allow=\"autoplay; encrypted-media\"\r\n            allowFullScreen\r\n            title=\"video\"\r\n          />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVideoList;\r\n","import React, { useState, useEffect } from \"react\";\nimport CheckBox from \"./components/Checkbox\";\nimport DisplayVideoList from \"./components/DisplayVideoList\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [favouriteChannel, setFavouriteChannel] = useState([\n    {\n      channelId: \"UCVTyTA7-g9nopHeHbeuvpRA\",\n      channelName: \"Late Night with Seth Myers\",\n      isChecked: false,\n      maxResult: 10,\n    },\n    {\n      channelId: \"UCwWhs_6x42TyRM4Wstoq8HA\",\n      channelName: \"The Daily Show with Trevor Noah\",\n      isChecked: false,\n      maxResult: 10,\n    },\n    {\n      channelId: \"UCMtFAi84ehTSYSE9XoHefig\",\n      channelName: \"The Late Show with Stephen Colbert\",\n      isChecked: false,\n      maxResult: 10,\n    },\n  ]);\n\n  const [videoList, setVideoList] = useState([]);\n  const [displayList, setDisplayList] = useState([]);\n  const [hiddenList, setHiddenList] = useState([]);\n\n  const [url, setUrl] = useState(\"\");\n\n  // const API_KEY = \"AIzaSyDagaG5nAGV-I-I9mTt9-_6wSnGmE-Yhe0\";\n\n  //Alternative API_KEY's - in case the quota for above mentioned key gets over\n  const API_KEY = \"AIzaSyATLijep4MFzYkPAYkQX4HmQXSN4y7_ZzE\";\n  //const API_KEY = \"AIzaSyD-TLUNet49SW2TYEmgKVPNAdOcWQMjrVo\";\n\n  const resetVideoList = [];\n\n  useEffect(() => {\n    let listToBeDisplayed = videoList\n      .filter(\n        (hidden) => !hiddenList.find((id) => id.videoId === hidden.videoId)\n      )\n      .filter((definedVideoId) => definedVideoId.videoId !== undefined)\n      .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))\n      .slice(0, 10);\n\n    setDisplayList(listToBeDisplayed);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [videoList]);\n\n  //Function for list updations on deletion of Video list\n  const hideVideo = (videoId, channelId) => {\n    const newListToBeDisplayed = displayList.filter(\n      (videos) => videos.videoId !== videoId\n    );\n\n    const hiddenVideos = displayList.filter(\n      (videos) => videos.videoId === videoId\n    );\n\n    setDisplayList(newListToBeDisplayed);\n\n    hiddenVideos.map((detailsHiddenVideos) =>\n      setHiddenList((prevList) => [\n        ...prevList,\n        { videoId: detailsHiddenVideos.videoId },\n      ])\n    );\n\n    setFavouriteChannel(\n      favouriteChannel.map((channelData) => {\n        if (channelId === channelData.channelId) {\n          channelData.maxResult = channelData.maxResult + 1;\n        }\n        return channelData;\n      })\n    );\n  };\n\n  //Function to display videos on click of video list item\n  const displayVideo = (videoId, channelId) => {\n    setUrl(`https://www.youtube.com/embed/${videoId}`);\n    hideVideo(videoId, channelId);\n  };\n\n  //Function to update favourite channel list on click of checkbox\n  const changeChannelList = (event, channelId) => {\n    setFavouriteChannel(\n      favouriteChannel.map((channelData) => {\n        if (channelId === channelData.channelId) {\n          channelData.isChecked = event.target.checked;\n        }\n        return channelData;\n      })\n    );\n  };\n\n  //Function to fetch video listing asynchronously in parallel and\n  //updating the video list\n  const searchVideos = async (channels) => {\n    try {\n      const responses = channels.map((channel) =>\n        fetch(\n          `https://youtube.googleapis.com/youtube/v3/search?part=snippet&channelId=${channel.channelId}&maxResults=${channel.maxResult}&order=date&type=video&key=${API_KEY}`\n        )\n          .then((res) => res.json())\n          .catch((e) => {\n            document.getElementById(\"errorDiv\").style.display = \"block\";\n            document.getElementById(\"errorDiv\").innerHTML = e;\n          })\n      );\n      const allResponses = await Promise.all(responses);\n\n      allResponses.forEach((responseListItem) => {\n        responseListItem.items.map((videoDetails) =>\n          setVideoList((prevList) => [\n            ...prevList,\n            {\n              title: videoDetails.snippet.title,\n              description: videoDetails.snippet.description,\n              publishedAt: videoDetails.snippet.publishedAt,\n              videoId: videoDetails.id.videoId,\n              channelId: videoDetails.snippet.channelId,\n            },\n          ])\n        );\n      });\n    } catch (error) {\n      document.getElementById(\"errorDiv\").style.display = \"block\";\n      document.getElementById(\"errorDiv\").innerHTML =\n        \"Your Daily Quota for Fetching API Data is Over. Kindly Try Again Tomorrow\";\n    }\n  };\n\n  //Function to reset url and video list and call search function with desired channel list\n  const searchConditions = () => {\n    let selectedChannels = favouriteChannel.filter(\n      (shows) => shows.isChecked === true\n    );\n\n    setUrl(\"\");\n\n    setVideoList(resetVideoList);\n\n    if (selectedChannels.length === 0) {\n      searchVideos(favouriteChannel);\n    } else {\n      searchVideos(selectedChannels);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <fieldset>\n          <legend>Select your favourite channel</legend>\n          <ul className=\"channel-list\">\n            {favouriteChannel.map((channelList, index) => (\n              <CheckBox\n                key={index}\n                channelList={channelList}\n                changeChannelList={changeChannelList}\n              />\n            ))}\n          </ul>\n          <div className=\"searchButton\">\n            <input\n              type=\"button\"\n              value=\"Search Videos\"\n              onClick={searchConditions}\n            />\n          </div>\n        </fieldset>\n      </header>\n      <div id=\"errorDiv\"></div>\n\n      {displayList ? (\n        <DisplayVideoList\n          displayList={displayList}\n          hideVideo={hideVideo}\n          displayVideo={displayVideo}\n          url={url}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}